<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Grammar Rule Basics</title><link href="styles/graphSynthStyle.css" rel="stylesheet" type="text/css" /><style type="text/css"></style>
</head><body><div id="container"><div id="masthead"><a  style="border-width:0" href="http://www.engr.utexas.edu/"><img alt="UT Austin and the College of Engineering" src="images/UTCOEemblem.jpg" style="float: right" class="UT_COE_emblem" /></a> <h1>GraphSynth</h1><h5>Version 1.7</h5><h6>Software for Creating Graph Grammars<br />created by the <a href="http://www.me.utexas.edu/~adl/">Automated Design Lab</a><br />in the <a href="http://www.me.utexas.edu/">Mechanical Engineering Department</a><br />under the direction of <a href="mailto:mc1@mail.utexas.edu?subject=a question/comment about GraphSynth">Dr. Matt Campbell</a><br /></h6></div><div id="navigation"><ul><li><a href="index.htm">Home</a></li><li><a href="gettingStarted.htm">Getting Started</a></li><li><a href="introMethod.htm">Methodology Overview</a></li><li><a href="graphs.htm">Graph Basics</a></li><li><a href="grammars.htm">Grammar Basics</a></li><li><a href="rule_recognition.htm">Grammars: Recognition</a></li><li><a href="rule_application.htm">Grammars: Application</a></li><li><a href="ruleSets.htm">Grammars: Rulesets</a></li><li><a href="generation.htm">Generation</a></li><li><a href="searchProcess.htm">Search Process</a></li><li><a href="navigating.htm">Navigating GraphSynth</a></li><li><a href="examples.htm">Examples</a></li><li><a href="download.htm">Download</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div><div id="content"><h2>Grammar Rule Basics</h2><h3>Opening &amp; Saving</h3><p>Grammar rules are stored in GraphSynth in a similar manner to how <a href="graphs.htm">graphs are stored</a>. Within the grammarRule class (under the 1.Representation folder) a rule is comprised of the following main fields:</p><p class="codeSnippet"><span class="blueCode">public string</span> name;<br /><span class="blueCode">public</span> <span class="tealCode">designGraph</span> L;<br /><span class="blueCode">public</span> <span class="tealCode">designGraph</span> R;<br /><span class="blueCode">public</span> <span class="tealCode">Boolean</span> spanning;<br /><span class="blueCode">public</span> <span class="tealCode">Boolean</span> induced;<br /><span class="blueCode">public</span> <span class="tealCode">Boolean</span> containsAllGlobalLabels;<br /><span class="blueCode">public</span> <span class="tealCode">List</span> recognizeFunctions;<br /><span class="blueCode">public</span> <span class="tealCode">List</span> applyFunctions;<br /><span class="blueCode">public</span> <span class="tealCode">List</span> embeddingRules; </p><p>The rule contains a simple name and two designGraphs, one representing the left-hand-side, or L (what is used for <a href="rule_recognition.htm">recognition</a>), and one representing the right-hand-side, or R (what is used for <a href="rule_application.htm">application</a>). It is likely that the rule should have some overlap in the elements that are in L and R. However, these are stored twice as separate elements of both L and R. These elements represent the K or common graph between in the rule and play a crucial role in rule application. This is followed by three Booleans: <span class="codeInText">spanning</span>, <span class="codeInText">induced</span>, <span class="codeInText">containsAllGlobalLabels </span>which are defined as part of the recognition (see Table 1 under <a href="rule_recognition.htm">Recognition</a>). </p><h3>Parametric Rule Files</h3><p >The next two lists represent the names of functions, for C# functions that have been written to add to the recognition or application criteria. These are especially useful in parametric rules—rules that are in some way based on the local variables (stored as doubles) stored in the nodes and arcs of the graph. </p><p style="width: 281px">When drafting a rule in GraphSynth, one can access many of these rule properties by invoking the properties window (shown to the right). This is the properties window for the rule named seedBurst1Rule4 (seedBurst1Rule4 .xml in the rules directory). It is a fairly simple rule with one Parametric Recognize Function called isALeafNode and one Parametric Apply Function called distributeTo1NewRoot. When this rule was created, a template for these functions were automatically created in the .cs file called seedBurstParamRules.cs. When GraphSynth creates these templates all Parametric Apply Functions will look like the following: </p><p class="figure" style="left: 458px; top: 828px"><img alt="properties window for a rule" src="images/rulesPropertyWindow.png" width="306" height="379" /></p><p class="codeSnippet"><span class="tealCode">/* This is APPLY for the rule entitled: swirlRule1 */</span><br /><span class="blueCode">public </span><span class="tealCode">designGraph </span>distributeTo1NewRoot(<span class="tealCode">designGraph </span>Lmapping, <span class="tealCode">designGraph </span>host, <span class="tealCode">designGraph </span>Rmapping, <span class="blueCode">double</span>[] parameters) <br />{ <br /><br /><span class="tealCode">/* here is where the code for the APPLY function <br />* is to be located. Please modify host (or <br />* located nodes) with the input from parameters. */<br /></span><br /><span class="blueCode">return </span>host; <br />}</p><p>This means that one can draft any functions on the resulting host that results after all other rule modifications have occurred (see <a href="rule_application.htm">Application</a>). The <span class="codeInText">Lmapping </span>and <span class="codeInText">Rmapping </span>are needed to identify elements locations within the host. The examples in the rules directory are a good place to start to understand what can be done with this function. The Parametric Recognize Functions are more restrictive. The template for a parametric recognize rule looks like the following: </p><p>The Parametric Recognize Functions are more restrictive. The template for a parametric recognize rule looks like the following:</p><p class="codeSnippet"><span class="tealCode">/* This is RECOGNIZE for the rule entitled: */ </span><br /><span class="blueCode">public double </span>isALeafNode (<span class="tealCode">designGraph </span>L, <span class="tealCode">designGraph </span>host, <span class="tealCode">List</span>&lt;<span class="tealCode">node</span>&gt; locatedNodes, <span class="tealCode">List</span>&lt;<span class="tealCode">arc</span>&gt; locatedArcs) <br />{<br /><br /><span class="tealCode">/* here is where the code for the RECOGNIZE function <br />* is to be located. Please remember that returning <br />* a positive real (double) is equivalent to a <br />* constraint violation. Zero and negative numbers <br />* are feasible. */ </span><br /><br /><span class="blueCode">return </span>0.0; <br />} </p><p>As the template shows, these functions return a double instead of a Boolean, which may seem to be the more obvious type for whether or not a rule is recognized. Only non-positive-valued real&#39;s will qualify as a successful match. This is to meet with negative null form of constraints used in numerical optimization. Constraints are usually written in the form g<sub>i</sub>(x) ≤ 0.0 to comply with penalty function and Karush-Kuhn Tucker conditions. Fortunately, understanding the reasons are not necessary for creating meaningful rules. Just remember that a positive number in NOT a match. Example of these rules can be found in the rules directory.</p><h3>Embedding Rules </h3><p>As described in <a href="file:///C:/Users/Matthew%20Campbell/Research/GraphSynth/graphsynth%20Help/GSHelp/rule_application.htm">Application</a>, there are certain <span class="codeInText">arc </span>modifications that cannot be represented in the L and R graphs. These free-arc embedding rules are stored in a class under Representation called <span class="codeInText">embeddingRule.cs</span>. When drafting a rule one can specify in the Properties Window (as shown above) how many embedding rules to create for the rule. However, the actual drafting of embedding rule values must be done in XML. Once the rule is saved and opened in an XML editor one will see the following line added to the file: </p><p class="codeSnippet"><span class="blueCode">&lt;<span class="brownCode">embeddingRules</span>&gt;<br/>&nbsp;&nbsp; &lt;</span><span class="brownCode">embeddingRule</span><span class="blueCode">&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">freeArcLabel </span><span class="blueCode">/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">LNodeName </span><span class="blueCode">/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">neighborNodeLabel </span><span class="blueCode">/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">RNodeName </span><span class="blueCode">/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">originalDirection</span><span class="blueCode">&gt;</span>0<span class="blueCode">&lt;/</span><span class="brownCode">originalDirection</span><span class="blueCode">&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">newDirection</span><span class="blueCode">&gt;</span>0<span class="blueCode">&lt;/</span><span class="brownCode">newDirection</span><span class="blueCode">&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;</span><span class="brownCode">allowArcDuplication</span><span class="blueCode">&gt;</span>false<span class="blueCode">&lt;/</span><span class="brownCode">allowArcDuplication</span><span class="blueCode">&gt;<br/>&nbsp;&nbsp; &lt;/</span><span class="brownCode">embeddingRule</span><span class="blueCode">&gt;<br/>&lt;/</span><span class="brownCode">embeddingRules</span><span class="blueCode">&gt;</span></p><p>This means that for the list of embedding rules (<span class="blueCode">&lt;/</span><span class="brownCode">embeddingRules</span><span class="blueCode">&gt;</span>), there is one free-arc embedding rule (<span class="blueCode">&lt;/</span><span class="brownCode">embeddingRule</span><span class="blueCode">&gt;</span>) with the following properties. The only field that must be filled in this rule is the RNodeName since that specifies what new node (following the node produced from the Rmapping) are the free-arcs to be connected to. Any number of rules may be created and rules may have many of the same values. Be careful though, the modifications performed by embedding rules are hard to debug! </p></div><div id="footer"><p><a href="index.htm">Home</a> | <a href="gettingStarted.htm">Getting Started</a> | <a href="introMethod.htm">Methodology Overview</a> | <a href="graphs.htm">Graph Basics</a> | <a href="grammars.htm">Grammar Basics</a> | <a href="rule_recognition.htm">Grammars: Recognition</a> | <a href="rule_application.htm">Grammars: Application</a> | <a href="ruleSets.htm">Grammars: Rulesets</a> | <a href="generation.htm">Generation</a> | <a href="searchProcess.htm">Search Process</a> | <a href="navigating.htm">Navigating GraphSynth</a> | <a href="examples.htm">Examples</a> | <a href="download.htm">Download</a></p></div><div class="bottomLegalities"><br /><br /><br />© 2007, the <a href="http://www.me.utexas.edu/~adl/">Automated Design Laboratory</a>,&nbsp; <a href="http://www.me.utexas.edu/">Mechanical Engineering Department</a> of the <a href="http://www.engr.utexas.edu/">College of Engineering</a> at the <a href="http://www.utexas.edu/">University of Texas at Austin</a>. <br />All rights reserved. This page was last updated on Wednesday, July 4, 2007 by the <a href="mailto:mc1@mail.utexas.edu">Dr. Matt Campbell</a>. </div></div></body></html>