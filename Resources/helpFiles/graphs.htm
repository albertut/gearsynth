<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Graph Basics</title><link href="styles/graphSynthStyle.css" rel="stylesheet" type="text/css" /><style type="text/css"></style>
</head><body><div id="container"><div id="masthead"><a  style="border-width:0" href="http://www.engr.utexas.edu/"><img alt="UT Austin and the College of Engineering" src="images/UTCOEemblem.jpg" style="float: right" class="UT_COE_emblem" /></a> <h1>GraphSynth</h1><h5>Version 1.7</h5><h6>Software for Creating Graph Grammars<br />created by the <a href="http://www.me.utexas.edu/~adl/">Automated Design Lab</a><br />in the <a href="http://www.me.utexas.edu/">Mechanical Engineering Department</a><br />under the direction of <a href="mailto:mc1@mail.utexas.edu?subject=a question/comment about GraphSynth">Dr. Matt Campbell</a><br /></h6></div><div id="navigation"><ul><li><a href="index.htm">Home</a></li><li><a href="gettingStarted.htm">Getting Started</a></li><li><a href="introMethod.htm">Methodology Overview</a></li><li><a href="graphs.htm">Graph Basics</a></li><li><a href="grammars.htm">Grammar Basics</a></li><li><a href="rule_recognition.htm">Grammars: Recognition</a></li><li><a href="rule_application.htm">Grammars: Application</a></li><li><a href="ruleSets.htm">Grammars: Rulesets</a></li><li><a href="generation.htm">Generation</a></li><li><a href="searchProcess.htm">Search Process</a></li><li><a href="navigating.htm">Navigating GraphSynth</a></li><li><a href="examples.htm">Examples</a></li><li><a href="download.htm">Download</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div><div id="content"><h2>Graph Basics</h2><p>Graphs are stored in GraphSynth as designGraph.cs. The “design” keyword is to distinguish it from other types that may be used within larger implementations. For example, in GraphSynth an open source library known as Netron is used for visualization. This compiled project (as a .dll) contains it’s own definition for graph. On opening designGraph.cs (under the 1.Representation folder), we see the following: </p><p class="codeSnippet"><span style="color: blue;">public partial class</span> <span style="color: teal;">designGraph<br /></span><span style="color: blue;"><span style="width: 501px; height: 700px">&nbsp;&nbsp; </span>public</span><span style="color: black;"> </span><span style="color: blue;">string</span><span style="color: black;"> name;</span><span style="color: blue;"><br />&nbsp;&nbsp; public</span><span style="color: black;"> </span><span style="color: teal;">List</span><span style="color: black;">&lt;</span><span style="color: blue;">string</span><span style="color: black;">&gt; globalLabels;</span><br />&nbsp;&nbsp; <span style="color: blue;">public </span><span style="color: teal;">List</span> <span style="color: black;">&lt;</span> <span style="color: blue;">double</span> <span style="color: black;">&gt; globalVariables;<br /></span><span style="color: blue;">&nbsp;&nbsp; public</span><span style="color: black;"> </span><span style="color: teal;">List</span><span style="color: black;">&lt;</span><span style="color: teal;">node</span><span style="color: black;">&gt; nodes = </span><span style="color: blue;">new</span><span style="color: black;"> </span><span style="color: teal;">List</span><span style="color: black;">&lt;</span><span style="color: teal;">node</span><span style="color: black;">&gt;();</span></p><p class="codeSnippet"><span style="color: blue;"><span style="width: 501px; height: 700px">&nbsp;&nbsp; </span>public</span><span style="color: black;"> </span><span style="color: teal;">List</span><span style="color: black;">&lt;</span><span style="color: teal;">arc</span><span style="color: black;">&gt; arcs = </span><span style="color: blue;">new</span><span style="color: black;"> </span><span style="color: teal;">List</span><span style="color: black;">&lt;</span><span style="color: teal;">arc</span><span style="color: black;">&gt;();</span></p><p>The graph contains a name, labels (which are any number of strings), and variables (a list of any number of double-real&#39;s). Additionally, there are two lists: one for <span class="codeInText">arcs </span>and one for <span class="codeInText">nodes</span>. This is a “<span class="codeInText">partial</span>” description of the designGraph class, the rest is stored in the XMLandIO directory. The classes for <span class="codeInText">arc </span>and <span class="codeInText">node </span>are also fairly straightforward. Note that each of these contains references to the connecting elements (<span class="codeInText">to </span>and <span class="codeInText">from </span>in arc point to the two nodes connected to the arc; and <span class="codeInText">arcsTo</span>, <span class="codeInText">arcsFrom</span>, and arcs in node reference connecting arcs). </p><p>One can freely draw graphs in GraphSynth by clicking File<span style="font-family: Arial;">→</span>New→Graph or typing Ctrl+N. A small empty box appears for you to add nodes, arcs and their labels. There are five node shapes. These can be added by right-clicking and scrolling to “Basic Shapes” or by typing Ctrl+1, Ctrl+2, Ctrl+3, Ctrl+4, Ctrl+5, Ctrl+6, or Ctrl+7. Each of these shapes has one or more connection points. By hovering the mouse over a connection point, one and click-and-drag arcs between shapes. By double-clicking an arc or node, or clicking Properties from the right-click menu, one can access various properties of the element. </p><p><br /></p><p class="figure" style="left: 231px; top: 842px; width: 415px"><img alt="an example graph created by GraphSynth" src="images/exampleRule.png" width="417" height="380" /><br />Figure 1: Creating a new graph in GraphSynth is accomplished by adding new nodes (with right-click or Ctrl+#), dragging arcs into places, and adjusting properties via the Properties Window. </p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;<br />&nbsp;</p><p>Graphs like all other GraphSynth elements are stored as XML files. These files can be opened in a text editor and altered as well. The example graph in figure one is saved as the following: </p><p class="figure"><img alt="example XML data from graph" src="images/designGraphXML.png" width="509" height="611" /> <img alt="example XML data from graph" src="images/designGraphXML2.png" width="509" height="562" /></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;<br />&nbsp;</p><p>Graphs like all other GraphSynth elements are stored as XML files. These files can be opened in a text editor and altered as well. The example graph in figure one is saved as the following: </p><h3>Inherited Types</h3><p>Inherited types can be created for nodes and arcs so that applications requiring more descriptive objects for nodes and arcs can be used. Note that in the XML, the second node is qualified by the vertex type. As an example of inherited classes, a basic implementation of vertex and edge are presented in the file, inheritedGeometryClasses.cs. Once these are created and properly compiled in GraphSynth, the classes can be placed in the Properties Window under the <span class="codeInText">nodeType </span>or <span class="codeInText">arcType </span>tags. Additionally, the types can be used in the creation of rules. If a rule is made for vertices and edges it will only be recognized on graphs that contain such classes. </p></div><div id="footer"><p><a href="index.htm">Home</a> | <a href="gettingStarted.htm">Getting Started</a> | <a href="introMethod.htm">Methodology Overview</a> | <a href="graphs.htm">Graph Basics</a> | <a href="grammars.htm">Grammar Basics</a> | <a href="rule_recognition.htm">Grammars: Recognition</a> | <a href="rule_application.htm">Grammars: Application</a> | <a href="ruleSets.htm">Grammars: Rulesets</a> | <a href="generation.htm">Generation</a> | <a href="searchProcess.htm">Search Process</a> | <a href="navigating.htm">Navigating GraphSynth</a> | <a href="examples.htm">Examples</a> | <a href="download.htm">Download</a></p></div><div class="bottomLegalities"><br /><br /><br />© 2007, the <a href="http://www.me.utexas.edu/~adl/">Automated Design Laboratory</a>,&nbsp; <a href="http://www.me.utexas.edu/">Mechanical Engineering Department</a> of the <a href="http://www.engr.utexas.edu/">College of Engineering</a> at the <a href="http://www.utexas.edu/">University of Texas at Austin</a>. <br />All rights reserved. This page was last updated on Wednesday, July 4, 2007 by the <a href="mailto:mc1@mail.utexas.edu">Dr. Matt Campbell</a>. </div></div></body></html>